// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum STATUS {
  ACTIVE
  UNACTIVE
  EXPIRED
}

model Guilds {
  id String @id @default(uuid())
  guildId String @unique
  name String
  avatar String?
  createdAT DateTime @default(now())
  tickets Tickets?
  members MemberGuilds[]
  premium Premium?
  channels GuildChannels[]
  config GuildConfig?

  @@index([guildId])
}

model Members {
  id String @id @default(uuid())
  discordId String @unique
  name String
  avatar String?
  banner String?
  bot Boolean @default(false)
  premium Premium[]
  createdAT DateTime @default(now())
  tokens Tokens[]

  guilds MemberGuilds[]
  @@index([discordId])
}

model MemberGuilds {
  id String @id @default(uuid())
  guild Guilds @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  guildId String
  member Members @relation(fields: [memberId], references: [discordId])
  memberId String
  ticketId String?
  ticket GuildToMemberTickets? @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
}

model GuildChannels {
  id String @id @default(uuid())
  name String
  channelId String @unique
  type Int
  guild Guilds @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  guildId String

  @@index([channelId])
}

model GuildConfig {
  id String @id @default(uuid())
  guild Guilds @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
  guildId String @unique
  logsChannel String?
  modRoles String?
  ticketChannel String?
  ticketSection String?
  announcementsChannel String?
  welcomeChannel String?

  @@index([id])
}

model Tickets {
  id String @id @default(uuid())
  name String
  channelId String?
  createdAT DateTime @default(now())
  tickets GuildToMemberTickets[]
  guild Guilds @relation(fields: [guildId], references: [guildId])
  guildId String @unique
}

model GuildToMemberTickets {
  id String @id @default(uuid())
  messages String?
  memberId String
  ticketId String
  member MemberGuilds[]
  ticket Tickets @relation(fields: [ticketId], references: [id])
}

model Premium {
  id String @id @default(uuid())
  guild Guilds @relation(fields: [guildId], references: [guildId])
  guildId String @unique
  member Members @relation(fields: [memberId], references: [discordId])
  memberId String 
  token Tokens @relation(fields: [tokenId], references: [id])
  tokenId String @unique
  redeemedOn DateTime @default(now())
  status STATUS @default(ACTIVE)
}

model Tokens {
  id String @id @default(uuid())
  token String @unique
  premium Premium?
  createdAt DateTime @default(now())
  expiresIn DateTime
  status STATUS @default(UNACTIVE)
  price Decimal
  member Members @relation(fields: [memberId], references: [discordId])
  memberId String
}